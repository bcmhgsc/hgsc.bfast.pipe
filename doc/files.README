transfer_driver.rb
  - The main driver class. This class acts as the interface to the potential
    transfer actions. This class is passed in options from the command line.

  - Methods -
    - run: This method parses the inputs and passes the parameters to the
           appropriate action class. This method also checks the validity
           of the input.

  - Examples -
    - examples of command line input can be found in the transfer.README.

t_actions.rb
  - This is the the class that bridges the transfer driver with the individual
    transfer actions. It loads in all the action classes, then parses the action
    parameter and runs the appropriate class.

  - Methods -
    - get_action: This method returns an instanciation of the appropriate action
                  class based off the action parameter.

transfer_completed_se.rb
  - This is the class for the completed_se action. It takes in a list of run names
    and machines and places the slide done flag in the appropriate directory on the
    individual machines.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

transfer_disk_usage.rb
  - This is the class for the disk_usage action. It takes in a list of machine names
    and checks the disk usage on each one. If the disk usage passes a certain threshold
    an email will be sent to the list of email addresses that are passed in.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

transfer_list_se.rb
  - This is the class for the list_se action. It takes in a list of machines and run
    names and then accesses those machines to display the information associated with
    the specified run names. If no run names are specified, it display the information
    for all runs on that machine.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

transfer_ping.rb
  - This is the class for the ping action. It takes in a list of machine names and pings
    each one. It then displays the status of each of the machines.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

transfer_stop.rb
  - This is the class for the stop action. It takes in a list of machine names and stops
    all the current transfers from the specified machines.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

transfer_transfer.rb
  - This is the class for transfer action. It takes in a list of machines, an snfs number,
    a list of run names, and an email address. This class then initiates an rsync based off
    those parameters.

  - Methods -
    - run: Takes in the parameter hash generated by the transfer driver and uses it
           to run the appropriate methods

lib/emailer.rb
  - module to send the email

lib/se_inst.rb
  - class to check the SE based on the given IP
  - checks storage, lists SE on instrument, set .slide_done.txt flag

  - initialize(ip, df = 0)
    - Takes in IP and loads up a hash of the SE with paths
    - pass in df as 1 to avoid the hash loading

  - run_name_from_path(full_path)
    - pass in the full path of a csfasta or qual and it will return the SE name
    - ie.  /data/results/solid0044/0044_20100525_1_SP/ANG_TOVA_36_1580_01_2sA_0
      1003311175_4/results.F1B1/libraries/defaultLibrary/primary.20100601143519
      571/reads/0044_20100525_1_SP_ANG_TOVA_36_1580_01_2sA_01003311175_4_F3.csf
      asta
      returns: 0044_20100525_1_SP_ANG_TOVA_36_1580_01_2sA_01003311175_4

  - check_storage(email_to)
    - checks storage and sends email if its over the threshold 
      (currently set at 70%)

  - se_type?(files)
    - takes in an array of files (csfasta, qual) and returns either FR, MP, PE,
      or BC

  - se_on_machine(se = "all")
    - takes in a SE name and list the SE information
    - if nothing was given, it will list out all of the SE on the instrument

  - path_parse(path)
    - takes in the path to a file and returns the OpenStruct object
    - ie.  /data/results/solid0714/0714_20100528_2_SP/ANG_TCOL_AA_A00L_10A_1_1s
           A_01003311206_4/results.F1B1/libraries/BC14/primary.201006
           05013237983/reads/0714_20100528_2_SP_ANG_TCOL_AA_A00L_10A_1_1sA_0100
           3311206_4_F3_BC14.csfasta
       returns obj.mach   = "solid0714"              
               obj.rname  = "0714_20100528_2_SP"
               obj.sample = "ANG_TCOL_AA_A00L_10A_1_1sA_01003311206_4"
               obj.bc     = "BC14"
      - note: obj.bc = "defaultLibrary" on the non-multiplex runs

  - place_done_flag(se)
    - creates the .slide_done.txt in the expected location for the given SE
    - ie. se = 0714_20100528_2_SP_ANG_TCOL_AA_A00L_10A_1_1sA_01003311206_4
          touch /data/results/solid0714/0714_20100528_2_SP/.slide_done.txt

  - completed_run
    - returns an array of the SE run name that contains .slide_done.txt

  - completed_se?(se)
    - checks if the SE given has been completed

  - all_se
    - all_se accessor

  - matching_keys(name)
    - returns all SE that may contains the given string, otherse empty array

  - ssh_hostname
    - returns the hostname of the current Se_inst object

lib/solid_transfer.rb
  - handles the transferring of the solid raw data from instruments to ardmore
  - it will create a directory .hgsc_solid in user's home to keep track of new
    slides and done slides
    - new slides will be tracked in ~/.hgsc_slide/#{machine}/*new_slides.txt
    - completed slide will be tracked in 
      ~/.hgsc_solid/#{machine}/#{machine}_done_slides.txt
  - location to be stored on ardmore:
    /stornext/snfs#/next-gen/solid/results/solid_machine/run_name/...
    ie. /stornext/snfs5/next-gen/solid/results/solid0510/2010/06/0510_20100611
        _2_SP/ANG_ZZ_NA12812_10_1sA_01003311287_1

  - initialize(ip, email)
    - takes in ip to construct a se_inst object and email to inform the users
  
  - transfer(snfs, rname = "all")
    - start the transfer base on which snfs will be placed and the se name
      - if nothing is given in rname then it'll transfer all
    - an email will be sent out if SE is new, this will be tracked in 
      ~/.hgsc_solid/#{machine}/#{machine}_new_slides.txt

  - completed_se(snfs, rname = "all")
    - checks the files after the data have been transferred from the instrument
      Any completed SE (contains .slide_done.txt) will sent email to given email
    - md5sum is used to check verify if the transfer process was complete
      - the md5sum is stored in a file called md5sum_check.txt in the rname path
      - ie. /stornext/snfs5/next-gen/solid/results/solid0510/2010/06/
            0510_20100611_2_SP/md5sum_check.txt
    - after md5sum of the files on ardmore checksout with the ones on instrument
      an email will be sent out per SE
    - the name of transferred SE will be stored in 
      ~/.hgsc_solid/#{machine}/#{machine}_done_slides.txt

  - check_transferred?(rname, done_slides)
    - checks whether if the rname given has been transferred from the slide
      done list

  - add_line_to_file(file, line)
    - appends the input string to the end of the file

  - dest_path(num, path, se_name = "empty")
    - returns the destination path for transfer with the input path from
      instrument and the snfs number
    - if snfs number does not exist it will exit the process
      - upon exiting the locks created (with the se_name given) will be 
        removed.

  - run_name_path(num, run)
    - returns the path up to the run name of the SE from the given snfs number 
      and SE name(run)

  - md5sum_file(file)
    - checks the md5sum of the file (path in ardmore)

  - ssh_md5sum_file(file)
    - checks the md5sum of the file on instrument (path in instrument)

  - get_bp_length(fasta_path)
    - returns the length of the last line from the path given
  - stop_rsync
    - kills the rsync processes that is from the given ip
  - check_ready_for_analysis?(se)
    - checks if the SE raw data have been transferred and ready for analysis

test/utest/fakedata.rb
  - class which creates fake data on solid0533
  - run name: 0533_20100666_2_SL

  - fakerawdata(name = "F3", type = "s", barcode = "")
    - name [ F3 | R3 | F5-P2 ] 
    - type [ s | p ] for fragment or mp
    - barcode [ BC [ 1 | 2| .. ] | "" ] empty for regular run
    - generates csfasta and qual where the script is ran

  - ssh_fr(count = 1)
    - creates a fake fragment run on instrument
    - if count = anything other than 1 it will create an extra primary 
      with a different time stamp

  - ssh_mp(count = 1)
   - creates a fake mp run on instrument

  - ssh_pe(count = 1)
    - create a fake pe run on instrument

  - ssh_bc(count = 1)
    - creates a fake bc run on instrumet
    - it will have BC1, BC2, BC3, BC4 different barcodes

  - ssh_fakerawdata(name = "F3", pr = 20100612145459025, type = "s", barcode = "")
    - creates fake run on instrument with the given name, primary time stamp,
      and barcode
    - this method will create the data by calling fakerawdata, transfer to
      instrument and removes it from current location

  - ssh_create_done_flag
    - creates .slide_done.txt flag for the run on instrument

  - rm_ssh_fakerawdata
    - removes the fake run created on instrument: 0533_20100666_2_SL

  - rm_fakerawdata
    - removes the fake data generate by fakerawdata()

  - rm_new_slide_file
    - removes the new slide file in home directory

  - rm_done_slide_file
    - removes the slide done file in home

  - rm_tracking_dir
    - removes the whole tracking directory in home

  - rm_ardmore_files
    - remove the fake data transfer to ardmore

test/utest/se_private_method.rb
  - allows the test classes to be able to call the private methods
test/utest/se_inst_utest.rb
  - unit test for lib/se_inst.rb

test/utest/solid_transfer_utest.rb
  - unit test for lib/solid_transfer.rb

test/utest/solid_transfer_test.rb
  - full test for solid_transfer
  - creation of the fake data on instrument: solid0533 and transfers to ardmore
