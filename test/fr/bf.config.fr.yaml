input_options:
 run_name: run_small_test
global_options:
 input_MP: 0
 input_CAP: 0
 lsf_queue: normal
 threads: 8
 bfast_bin: /stornext/snfs1/next-gen/drio-scratch/bfast_related/versions/production/bfast
 samtools_bin: /stornext/snfs1/next-gen/software/samtools-0.1.6
 picardjars: /stornext/snfs1/next-gen/software/picard-tools/current
 java_vm: /stornext/snfs1/next-gen/software/jdk1.6.0_01/bin/java
 trackdir: ./track_jobs
 space: CS
 fasta_file_name: /stornext/snfs3/drio_scratch/bf.indexes/small/test.fasta
 timing: ON
 logs_dir: ./lsf_logs
 run_dir: /stornext/snfs1/next-gen/drio-scratch/bfast_related/bf.pipeline.data.test/plain.fr.very.small.data
 #run_dir: /stornext/snfs1/next-gen/drio-scratch/bfast_related/bf.small.test/input.very.small.bzip2
# run_dir: /stornext/snfs1/next-gen/drio-scratch/bfast_related/bf.small.test/input.very.small.gzip
# run_dir: /stornext/snfs1/next-gen/drio-scratch/bfast_related/bf.small.test/input
# reads_dir: /stornext/snfs1/next-gen/drio-scratch/working.copies/hgsc.bfast.pipe/test/fr/reads
# output_dir: /stornext/snfs1/next-gen/drio-scratch/working.copies/hgsc.bfast.pipe/test/fr/output
 reads_dir: ./reads
 output_dir: ./output
 tmp_dir: /space1/tmp/
 output_id: output_id_like_test_drio
 reads_per_file: 50000
# options for compress_input / splits: none gzip bzip2
 compress_input: none
 compress_splits: none
match_options:
 threads: 8
 lsf_resources: "rusage[mem=280]"
local_options:
 threads: 8
 lsf_resources: "rusage[mem=280]"
post_options:
 algorithm: 4
 lsf_resources: "rusage[mem=400]"
 # Data for the @RG in the bam
 # Read group id: always 0 since we have reads from one singel run
 rg_id: 0
 # platform: SOLiD
 rg_pl: SOLiD
 # unique idententifier for the bam: RUN_NAME + LIMS ID + (*)
 rg_pu: 0079_20091023_1_SL_AWG_TG_NA19737_000pA_01003244530_1
 # Library, you have to query LIMS(barcode_id) to get the lib
 # use this perl script for that: hgsc.bfast.pipe/third_party/getLibraryInfo.pl
 # arguments: 01003244678-1 (barcode + spot_id)
 rg_lb: HS_1011_MP
 # read length: FR: rl=NN PE: rl=NN_NN MP: rl=NN_NN
 rg_ds: rl=25
 # Date the run was produced (ISO 8601 date or date/time)
 rg_dt: 2010-01-22T18:20:29-0600
 # Sample / Pool
 rg_sm: CMT-001
 # Name of sequencing center producing the read
 rg_cn: Baylor
tobam_options:
 lsf_resources: "rusage[mem=400]"
sort_options:
 lsf_resources: "rusage[mem=400]"
 # Specify how much memory we want to use in the java vm
 java_vm_mem: "1g"
dups_options:
 lsf_resources: "rusage[mem=400]"
 java_vm_mem: "1g"
 # Specify how much memory we want to use in the java vm
final_options:
 lsf_resources: "rusage[mem=400]"
header_options:
 # path to the jar file that contains the code to regenerate the header
 regen_jar: /stornext/snfs1/next-gen/solid/hgsc.solid.pipeline/bam.header.creation/bam.header.creation.jar
 # this is to specify what references to use to generate the header
 # two valid types: hsap36.1 and hsap37
 sq_type: hsap36.1
 lsf_resources: "rusage[mem=400]"
stats_options:
 lsf_resources: "rusage[mem=400]"
 s_jar: /stornext/snfs1/next-gen/solid/hgsc.solid.pipeline/BAMStats/BAMStats.jar
capture_options:
 lsf_resources: "rusage[mem=400]"
success_options:
 email_to: "deiros@bcm.edu driodeiros@gmail.com" 
